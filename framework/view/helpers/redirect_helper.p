##############################################################################
#	The URL will be generated by calling url_for with the options
##############################################################################
@redirect_to[hParams;iStatus]
	^if($hParams is hash && $hParams.status){
		$iStatus[$hParams.status]
	}

	^switch[$hParams.CLASS_NAME]{
		^case[string]{
			^switch(true){
				^case($hParams eq ":back"){
					^if(!def $env:HTTP_REFERER){^throw[RedirectBackError;RedirectBackError]}
					^redirect_to_full_url[^taint[as-is][$env:HTTP_REFERER];$iStatus]
				}

				^case(^hParams.match[^^\w+://.*][i]){
					^redirect_to_full_url[$hParams;$iStatus]
				}

				^case[DEFAULT]{
					^redirect_to_full_url[$hParams;$iStatus]
				}
			}
		}

		^case[hash;DEFAULT]{
			^redirect_to[^url_for[$hParams];$iStatus]
		}
	}

	$result[]
#end @redirect_to[]



##############################################################################
@named_redirect_to[sName;hParams;iStatus]
	^redirect_to[^named_url_for[$sName;$hParams];$iStatus]
#end @named_redirect_to[]



##############################################################################
@redirect_to_full_url[sURL;iStatus]
	^if($self.performed){
		^throw[DoubleRenderError;DoubleRenderError;Can only render or redirect once per action]
	}
	^if($oLogger){
		^oLogger.info{Redirected to $sURL^if($iStatus){ ($iStatus)}}
	}
	^if(^iStatus.int(0) || !def $response:status){
		$response:status[^interpret_status(^iStatus.int($DEFAULT_REDIRECT_STATUS_CODE))]
	}

	$response:location[$sURL]

	$self.performed_redirect(true)
	
	^throw[fw.interupt.redirect;Redirect;$sURL]									^rem{ *** выкидываем exception для остановки обработки, в последствии обрабатывается framework *** }
#end @redirect_to_full_url[]
